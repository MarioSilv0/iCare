/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 103.0, "minX": 0.0, "maxY": 101077.0, "series": [{"data": [[0.0, 299.0], [0.1, 412.0], [0.2, 516.0], [0.3, 516.0], [0.4, 936.0], [0.5, 1015.0], [0.6, 1156.0], [0.7, 1339.0], [0.8, 1359.0], [0.9, 1542.0], [1.0, 1594.0], [1.1, 1807.0], [1.2, 2346.0], [1.3, 2362.0], [1.4, 2362.0], [1.5, 2416.0], [1.6, 2446.0], [1.7, 2562.0], [1.8, 3036.0], [1.9, 3078.0], [2.0, 3090.0], [2.1, 3172.0], [2.2, 3220.0], [2.3, 3331.0], [2.4, 3406.0], [2.5, 3589.0], [2.6, 3713.0], [2.7, 3817.0], [2.8, 3837.0], [2.9, 3901.0], [3.0, 4009.0], [3.1, 4014.0], [3.2, 4065.0], [3.3, 4943.0], [3.4, 5044.0], [3.5, 5199.0], [3.6, 5643.0], [3.7, 5941.0], [3.8, 6009.0], [3.9, 6339.0], [4.0, 6651.0], [4.1, 7311.0], [4.2, 7411.0], [4.3, 7459.0], [4.4, 7941.0], [4.5, 8358.0], [4.6, 8949.0], [4.7, 9140.0], [4.8, 9158.0], [4.9, 9758.0], [5.0, 10005.0], [5.1, 10005.0], [5.2, 10005.0], [5.3, 10005.0], [5.4, 10005.0], [5.5, 10005.0], [5.6, 10005.0], [5.7, 10005.0], [5.8, 10005.0], [5.9, 10005.0], [6.0, 10005.0], [6.1, 10005.0], [6.2, 10005.0], [6.3, 10005.0], [6.4, 10005.0], [6.5, 10005.0], [6.6, 10005.0], [6.7, 10005.0], [6.8, 10006.0], [6.9, 10006.0], [7.0, 10006.0], [7.1, 10006.0], [7.2, 10006.0], [7.3, 10006.0], [7.4, 10006.0], [7.5, 10006.0], [7.6, 10006.0], [7.7, 10006.0], [7.8, 10006.0], [7.9, 10006.0], [8.0, 10007.0], [8.1, 10007.0], [8.2, 10007.0], [8.3, 10007.0], [8.4, 10008.0], [8.5, 10008.0], [8.6, 10008.0], [8.7, 10008.0], [8.8, 10008.0], [8.9, 10008.0], [9.0, 10013.0], [9.1, 10026.0], [9.2, 10564.0], [9.3, 10627.0], [9.4, 10653.0], [9.5, 10780.0], [9.6, 10789.0], [9.7, 12183.0], [9.8, 13333.0], [9.9, 13744.0], [10.0, 13820.0], [10.1, 14088.0], [10.2, 14135.0], [10.3, 14303.0], [10.4, 14413.0], [10.5, 14886.0], [10.6, 14927.0], [10.7, 14994.0], [10.8, 15057.0], [10.9, 15110.0], [11.0, 15392.0], [11.1, 15449.0], [11.2, 15452.0], [11.3, 15523.0], [11.4, 15535.0], [11.5, 15540.0], [11.6, 15546.0], [11.7, 15566.0], [11.8, 15593.0], [11.9, 15623.0], [12.0, 15669.0], [12.1, 15716.0], [12.2, 15870.0], [12.3, 16128.0], [12.4, 16226.0], [12.5, 16323.0], [12.6, 16383.0], [12.7, 16778.0], [12.8, 17046.0], [12.9, 17065.0], [13.0, 17090.0], [13.1, 17149.0], [13.2, 17190.0], [13.3, 17234.0], [13.4, 17668.0], [13.5, 17783.0], [13.6, 18034.0], [13.7, 18500.0], [13.8, 18800.0], [13.9, 18823.0], [14.0, 18824.0], [14.1, 18942.0], [14.2, 19226.0], [14.3, 19314.0], [14.4, 19685.0], [14.5, 19765.0], [14.6, 19901.0], [14.7, 20066.0], [14.8, 20334.0], [14.9, 20667.0], [15.0, 20683.0], [15.1, 20842.0], [15.2, 20861.0], [15.3, 20914.0], [15.4, 20991.0], [15.5, 21149.0], [15.6, 21342.0], [15.7, 21472.0], [15.8, 21528.0], [15.9, 21531.0], [16.0, 21632.0], [16.1, 21643.0], [16.2, 21660.0], [16.3, 22164.0], [16.4, 22269.0], [16.5, 22386.0], [16.6, 22436.0], [16.7, 22647.0], [16.8, 23070.0], [16.9, 23116.0], [17.0, 23353.0], [17.1, 23840.0], [17.2, 23868.0], [17.3, 24320.0], [17.4, 24379.0], [17.5, 24379.0], [17.6, 24388.0], [17.7, 24877.0], [17.8, 24982.0], [17.9, 25228.0], [18.0, 26104.0], [18.1, 26182.0], [18.2, 26733.0], [18.3, 26822.0], [18.4, 26822.0], [18.5, 26858.0], [18.6, 26894.0], [18.7, 26904.0], [18.8, 26941.0], [18.9, 26977.0], [19.0, 27062.0], [19.1, 27091.0], [19.2, 27144.0], [19.3, 27378.0], [19.4, 27657.0], [19.5, 27678.0], [19.6, 27697.0], [19.7, 27714.0], [19.8, 27781.0], [19.9, 27862.0], [20.0, 27866.0], [20.1, 28280.0], [20.2, 28490.0], [20.3, 28498.0], [20.4, 28729.0], [20.5, 28795.0], [20.6, 28995.0], [20.7, 29266.0], [20.8, 29327.0], [20.9, 29834.0], [21.0, 29880.0], [21.1, 29927.0], [21.2, 30688.0], [21.3, 31579.0], [21.4, 31840.0], [21.5, 32237.0], [21.6, 32676.0], [21.7, 32944.0], [21.8, 33474.0], [21.9, 33867.0], [22.0, 34022.0], [22.1, 34382.0], [22.2, 34387.0], [22.3, 34615.0], [22.4, 34853.0], [22.5, 35342.0], [22.6, 35377.0], [22.7, 35416.0], [22.8, 35618.0], [22.9, 35698.0], [23.0, 36216.0], [23.1, 36377.0], [23.2, 36419.0], [23.3, 36425.0], [23.4, 36715.0], [23.5, 36741.0], [23.6, 37066.0], [23.7, 37589.0], [23.8, 37732.0], [23.9, 38028.0], [24.0, 38299.0], [24.1, 38322.0], [24.2, 38520.0], [24.3, 38532.0], [24.4, 38828.0], [24.5, 39008.0], [24.6, 39122.0], [24.7, 39577.0], [24.8, 39922.0], [24.9, 40190.0], [25.0, 40244.0], [25.1, 40374.0], [25.2, 40699.0], [25.3, 40992.0], [25.4, 41142.0], [25.5, 41287.0], [25.6, 42482.0], [25.7, 42726.0], [25.8, 42734.0], [25.9, 43282.0], [26.0, 43461.0], [26.1, 43527.0], [26.2, 43534.0], [26.3, 43618.0], [26.4, 43715.0], [26.5, 43763.0], [26.6, 44080.0], [26.7, 44482.0], [26.8, 44486.0], [26.9, 44881.0], [27.0, 45128.0], [27.1, 45144.0], [27.2, 45164.0], [27.3, 45217.0], [27.4, 45670.0], [27.5, 45925.0], [27.6, 46109.0], [27.7, 46158.0], [27.8, 46217.0], [27.9, 46811.0], [28.0, 47044.0], [28.1, 47059.0], [28.2, 47201.0], [28.3, 47258.0], [28.4, 47323.0], [28.5, 47433.0], [28.6, 47458.0], [28.7, 47459.0], [28.8, 47477.0], [28.9, 47530.0], [29.0, 47547.0], [29.1, 47610.0], [29.2, 47708.0], [29.3, 47823.0], [29.4, 47832.0], [29.5, 47888.0], [29.6, 47925.0], [29.7, 47928.0], [29.8, 48061.0], [29.9, 48154.0], [30.0, 48180.0], [30.1, 48198.0], [30.2, 48234.0], [30.3, 48258.0], [30.4, 48259.0], [30.5, 48260.0], [30.6, 48266.0], [30.7, 48279.0], [30.8, 48344.0], [30.9, 48345.0], [31.0, 48349.0], [31.1, 48359.0], [31.2, 48691.0], [31.3, 48705.0], [31.4, 48727.0], [31.5, 48736.0], [31.6, 48775.0], [31.7, 48845.0], [31.8, 49001.0], [31.9, 49060.0], [32.0, 49062.0], [32.1, 49146.0], [32.2, 49158.0], [32.3, 49171.0], [32.4, 49180.0], [32.5, 49196.0], [32.6, 49242.0], [32.7, 49352.0], [32.8, 49460.0], [32.9, 49564.0], [33.0, 49718.0], [33.1, 49788.0], [33.2, 49798.0], [33.3, 49851.0], [33.4, 49951.0], [33.5, 49974.0], [33.6, 50043.0], [33.7, 50102.0], [33.8, 50345.0], [33.9, 50360.0], [34.0, 50442.0], [34.1, 50657.0], [34.2, 50659.0], [34.3, 50676.0], [34.4, 50819.0], [34.5, 51173.0], [34.6, 51224.0], [34.7, 51264.0], [34.8, 51409.0], [34.9, 51453.0], [35.0, 51463.0], [35.1, 51548.0], [35.2, 51619.0], [35.3, 51649.0], [35.4, 51663.0], [35.5, 51704.0], [35.6, 51841.0], [35.7, 51847.0], [35.8, 51888.0], [35.9, 51892.0], [36.0, 51924.0], [36.1, 51939.0], [36.2, 51949.0], [36.3, 51967.0], [36.4, 51975.0], [36.5, 51981.0], [36.6, 51995.0], [36.7, 52007.0], [36.8, 52020.0], [36.9, 52021.0], [37.0, 52060.0], [37.1, 52124.0], [37.2, 52168.0], [37.3, 52197.0], [37.4, 52227.0], [37.5, 52257.0], [37.6, 52273.0], [37.7, 52349.0], [37.8, 52371.0], [37.9, 52373.0], [38.0, 52392.0], [38.1, 52419.0], [38.2, 52453.0], [38.3, 52686.0], [38.4, 52757.0], [38.5, 52800.0], [38.6, 52814.0], [38.7, 52908.0], [38.8, 52978.0], [38.9, 52995.0], [39.0, 53001.0], [39.1, 53034.0], [39.2, 53040.0], [39.3, 53052.0], [39.4, 53078.0], [39.5, 53135.0], [39.6, 53218.0], [39.7, 53229.0], [39.8, 53248.0], [39.9, 53281.0], [40.0, 53302.0], [40.1, 53327.0], [40.2, 53376.0], [40.3, 53425.0], [40.4, 53432.0], [40.5, 53460.0], [40.6, 53487.0], [40.7, 53492.0], [40.8, 53497.0], [40.9, 53536.0], [41.0, 53542.0], [41.1, 53569.0], [41.2, 53598.0], [41.3, 53607.0], [41.4, 53628.0], [41.5, 53667.0], [41.6, 53698.0], [41.7, 53719.0], [41.8, 53790.0], [41.9, 53798.0], [42.0, 53801.0], [42.1, 53809.0], [42.2, 53823.0], [42.3, 53842.0], [42.4, 53855.0], [42.5, 53949.0], [42.6, 53959.0], [42.7, 53963.0], [42.8, 54026.0], [42.9, 54084.0], [43.0, 54157.0], [43.1, 54239.0], [43.2, 54295.0], [43.3, 54324.0], [43.4, 54363.0], [43.5, 54403.0], [43.6, 54507.0], [43.7, 54520.0], [43.8, 54595.0], [43.9, 54602.0], [44.0, 54657.0], [44.1, 54658.0], [44.2, 54659.0], [44.3, 54665.0], [44.4, 54797.0], [44.5, 54812.0], [44.6, 55072.0], [44.7, 55085.0], [44.8, 55089.0], [44.9, 55096.0], [45.0, 55143.0], [45.1, 55160.0], [45.2, 55183.0], [45.3, 55287.0], [45.4, 55367.0], [45.5, 55379.0], [45.6, 55412.0], [45.7, 55442.0], [45.8, 55457.0], [45.9, 55469.0], [46.0, 55476.0], [46.1, 55536.0], [46.2, 55563.0], [46.3, 55633.0], [46.4, 55644.0], [46.5, 55703.0], [46.6, 55729.0], [46.7, 55787.0], [46.8, 55819.0], [46.9, 55854.0], [47.0, 55855.0], [47.1, 55895.0], [47.2, 55920.0], [47.3, 55941.0], [47.4, 55944.0], [47.5, 55945.0], [47.6, 55959.0], [47.7, 55991.0], [47.8, 55995.0], [47.9, 56008.0], [48.0, 56032.0], [48.1, 56089.0], [48.2, 56094.0], [48.3, 56110.0], [48.4, 56118.0], [48.5, 56128.0], [48.6, 56173.0], [48.7, 56202.0], [48.8, 56205.0], [48.9, 56213.0], [49.0, 56221.0], [49.1, 56251.0], [49.2, 56258.0], [49.3, 56268.0], [49.4, 56269.0], [49.5, 56350.0], [49.6, 56361.0], [49.7, 56381.0], [49.8, 56387.0], [49.9, 56465.0], [50.0, 56500.0], [50.1, 56518.0], [50.2, 56539.0], [50.3, 56581.0], [50.4, 56583.0], [50.5, 56643.0], [50.6, 56654.0], [50.7, 56656.0], [50.8, 56666.0], [50.9, 56691.0], [51.0, 56697.0], [51.1, 56706.0], [51.2, 56744.0], [51.3, 56755.0], [51.4, 56769.0], [51.5, 56769.0], [51.6, 56776.0], [51.7, 56788.0], [51.8, 56800.0], [51.9, 56801.0], [52.0, 56809.0], [52.1, 56854.0], [52.2, 56889.0], [52.3, 56892.0], [52.4, 56908.0], [52.5, 56929.0], [52.6, 56974.0], [52.7, 57053.0], [52.8, 57054.0], [52.9, 57056.0], [53.0, 57088.0], [53.1, 57130.0], [53.2, 57136.0], [53.3, 57144.0], [53.4, 57186.0], [53.5, 57197.0], [53.6, 57221.0], [53.7, 57261.0], [53.8, 57290.0], [53.9, 57305.0], [54.0, 57318.0], [54.1, 57327.0], [54.2, 57343.0], [54.3, 57384.0], [54.4, 57423.0], [54.5, 57444.0], [54.6, 57457.0], [54.7, 57483.0], [54.8, 57493.0], [54.9, 57494.0], [55.0, 57573.0], [55.1, 57582.0], [55.2, 57589.0], [55.3, 57600.0], [55.4, 57605.0], [55.5, 57615.0], [55.6, 57641.0], [55.7, 57656.0], [55.8, 57662.0], [55.9, 57668.0], [56.0, 57668.0], [56.1, 57675.0], [56.2, 57708.0], [56.3, 57727.0], [56.4, 57729.0], [56.5, 57801.0], [56.6, 57838.0], [56.7, 57841.0], [56.8, 57861.0], [56.9, 57884.0], [57.0, 57935.0], [57.1, 57945.0], [57.2, 57958.0], [57.3, 57964.0], [57.4, 57971.0], [57.5, 58008.0], [57.6, 58012.0], [57.7, 58029.0], [57.8, 58030.0], [57.9, 58043.0], [58.0, 58050.0], [58.1, 58062.0], [58.2, 58126.0], [58.3, 58150.0], [58.4, 58186.0], [58.5, 58224.0], [58.6, 58242.0], [58.7, 58280.0], [58.8, 58294.0], [58.9, 58312.0], [59.0, 58323.0], [59.1, 58328.0], [59.2, 58353.0], [59.3, 58364.0], [59.4, 58368.0], [59.5, 58372.0], [59.6, 58373.0], [59.7, 58385.0], [59.8, 58407.0], [59.9, 58413.0], [60.0, 58435.0], [60.1, 58465.0], [60.2, 58474.0], [60.3, 58488.0], [60.4, 58509.0], [60.5, 58520.0], [60.6, 58523.0], [60.7, 58542.0], [60.8, 58567.0], [60.9, 58579.0], [61.0, 58600.0], [61.1, 58607.0], [61.2, 58621.0], [61.3, 58639.0], [61.4, 58654.0], [61.5, 58668.0], [61.6, 58726.0], [61.7, 58744.0], [61.8, 58787.0], [61.9, 58807.0], [62.0, 58812.0], [62.1, 58812.0], [62.2, 58829.0], [62.3, 58829.0], [62.4, 58925.0], [62.5, 58928.0], [62.6, 58989.0], [62.7, 59024.0], [62.8, 59028.0], [62.9, 59032.0], [63.0, 59054.0], [63.1, 59056.0], [63.2, 59122.0], [63.3, 59144.0], [63.4, 59173.0], [63.5, 59174.0], [63.6, 59187.0], [63.7, 59194.0], [63.8, 59200.0], [63.9, 59214.0], [64.0, 59235.0], [64.1, 59254.0], [64.2, 59267.0], [64.3, 59274.0], [64.4, 59308.0], [64.5, 59331.0], [64.6, 59371.0], [64.7, 59372.0], [64.8, 59398.0], [64.9, 59422.0], [65.0, 59433.0], [65.1, 59452.0], [65.2, 59467.0], [65.3, 59510.0], [65.4, 59557.0], [65.5, 59568.0], [65.6, 59584.0], [65.7, 59584.0], [65.8, 59641.0], [65.9, 59652.0], [66.0, 59663.0], [66.1, 59670.0], [66.2, 59733.0], [66.3, 59740.0], [66.4, 59748.0], [66.5, 59760.0], [66.6, 59785.0], [66.7, 59826.0], [66.8, 59847.0], [66.9, 59854.0], [67.0, 59856.0], [67.1, 59873.0], [67.2, 59890.0], [67.3, 59893.0], [67.4, 59907.0], [67.5, 59936.0], [67.6, 59957.0], [67.7, 59969.0], [67.8, 59975.0], [67.9, 59990.0], [68.0, 60003.0], [68.1, 60009.0], [68.2, 60019.0], [68.3, 60035.0], [68.4, 60055.0], [68.5, 60064.0], [68.6, 60067.0], [68.7, 60094.0], [68.8, 60098.0], [68.9, 60131.0], [69.0, 60173.0], [69.1, 60193.0], [69.2, 60197.0], [69.3, 60241.0], [69.4, 60327.0], [69.5, 60335.0], [69.6, 60337.0], [69.7, 60359.0], [69.8, 60360.0], [69.9, 60362.0], [70.0, 60383.0], [70.1, 60407.0], [70.2, 60469.0], [70.3, 60525.0], [70.4, 60540.0], [70.5, 60586.0], [70.6, 60619.0], [70.7, 60625.0], [70.8, 60661.0], [70.9, 60694.0], [71.0, 60729.0], [71.1, 60744.0], [71.2, 60755.0], [71.3, 60757.0], [71.4, 60769.0], [71.5, 60780.0], [71.6, 60781.0], [71.7, 60787.0], [71.8, 60798.0], [71.9, 60842.0], [72.0, 60862.0], [72.1, 60865.0], [72.2, 60871.0], [72.3, 60889.0], [72.4, 60908.0], [72.5, 60965.0], [72.6, 60966.0], [72.7, 60982.0], [72.8, 60993.0], [72.9, 60997.0], [73.0, 61032.0], [73.1, 61035.0], [73.2, 61057.0], [73.3, 61079.0], [73.4, 61127.0], [73.5, 61143.0], [73.6, 61144.0], [73.7, 61161.0], [73.8, 61171.0], [73.9, 61187.0], [74.0, 61190.0], [74.1, 61200.0], [74.2, 61213.0], [74.3, 61220.0], [74.4, 61227.0], [74.5, 61248.0], [74.6, 61275.0], [74.7, 61306.0], [74.8, 61324.0], [74.9, 61328.0], [75.0, 61349.0], [75.1, 61441.0], [75.2, 61452.0], [75.3, 61455.0], [75.4, 61472.0], [75.5, 61503.0], [75.6, 61503.0], [75.7, 61541.0], [75.8, 61571.0], [75.9, 61638.0], [76.0, 61640.0], [76.1, 61662.0], [76.2, 61665.0], [76.3, 61674.0], [76.4, 61742.0], [76.5, 61765.0], [76.6, 61772.0], [76.7, 61772.0], [76.8, 61776.0], [76.9, 61832.0], [77.0, 61859.0], [77.1, 61878.0], [77.2, 61900.0], [77.3, 61959.0], [77.4, 61966.0], [77.5, 62009.0], [77.6, 62015.0], [77.7, 62021.0], [77.8, 62076.0], [77.9, 62223.0], [78.0, 62224.0], [78.1, 62260.0], [78.2, 62272.0], [78.3, 62335.0], [78.4, 62345.0], [78.5, 62372.0], [78.6, 62375.0], [78.7, 62381.0], [78.8, 62386.0], [78.9, 62391.0], [79.0, 62398.0], [79.1, 62407.0], [79.2, 62411.0], [79.3, 62435.0], [79.4, 62473.0], [79.5, 62492.0], [79.6, 62563.0], [79.7, 62571.0], [79.8, 62572.0], [79.9, 62593.0], [80.0, 62597.0], [80.1, 62631.0], [80.2, 62680.0], [80.3, 62683.0], [80.4, 62689.0], [80.5, 62707.0], [80.6, 62737.0], [80.7, 62765.0], [80.8, 62785.0], [80.9, 62806.0], [81.0, 62814.0], [81.1, 62850.0], [81.2, 62873.0], [81.3, 62923.0], [81.4, 62925.0], [81.5, 62948.0], [81.6, 62960.0], [81.7, 63021.0], [81.8, 63025.0], [81.9, 63054.0], [82.0, 63096.0], [82.1, 63106.0], [82.2, 63120.0], [82.3, 63121.0], [82.4, 63136.0], [82.5, 63139.0], [82.6, 63168.0], [82.7, 63192.0], [82.8, 63197.0], [82.9, 63198.0], [83.0, 63199.0], [83.1, 63207.0], [83.2, 63289.0], [83.3, 63292.0], [83.4, 63373.0], [83.5, 63392.0], [83.6, 63409.0], [83.7, 63483.0], [83.8, 63528.0], [83.9, 63537.0], [84.0, 63608.0], [84.1, 63724.0], [84.2, 63727.0], [84.3, 63746.0], [84.4, 63851.0], [84.5, 63911.0], [84.6, 63921.0], [84.7, 63940.0], [84.8, 63942.0], [84.9, 63947.0], [85.0, 63981.0], [85.1, 64006.0], [85.2, 64106.0], [85.3, 64174.0], [85.4, 64183.0], [85.5, 64208.0], [85.6, 64342.0], [85.7, 64398.0], [85.8, 64410.0], [85.9, 64450.0], [86.0, 64503.0], [86.1, 64635.0], [86.2, 64653.0], [86.3, 64766.0], [86.4, 64771.0], [86.5, 64775.0], [86.6, 64792.0], [86.7, 64798.0], [86.8, 64801.0], [86.9, 64807.0], [87.0, 64975.0], [87.1, 64993.0], [87.2, 65032.0], [87.3, 65104.0], [87.4, 65106.0], [87.5, 65127.0], [87.6, 65140.0], [87.7, 65228.0], [87.8, 65277.0], [87.9, 65322.0], [88.0, 65325.0], [88.1, 65418.0], [88.2, 65454.0], [88.3, 65568.0], [88.4, 65595.0], [88.5, 65693.0], [88.6, 65763.0], [88.7, 65833.0], [88.8, 66029.0], [88.9, 66125.0], [89.0, 66150.0], [89.1, 66256.0], [89.2, 66306.0], [89.3, 66396.0], [89.4, 66705.0], [89.5, 66811.0], [89.6, 66870.0], [89.7, 66927.0], [89.8, 67170.0], [89.9, 67174.0], [90.0, 67199.0], [90.1, 67287.0], [90.2, 67468.0], [90.3, 67538.0], [90.4, 67559.0], [90.5, 67606.0], [90.6, 67852.0], [90.7, 67982.0], [90.8, 67983.0], [90.9, 68647.0], [91.0, 68668.0], [91.1, 69081.0], [91.2, 69383.0], [91.3, 69521.0], [91.4, 69538.0], [91.5, 69773.0], [91.6, 70087.0], [91.7, 70184.0], [91.8, 70396.0], [91.9, 70466.0], [92.0, 70565.0], [92.1, 70823.0], [92.2, 70951.0], [92.3, 71108.0], [92.4, 71251.0], [92.5, 71519.0], [92.6, 71557.0], [92.7, 72083.0], [92.8, 73000.0], [92.9, 73749.0], [93.0, 74267.0], [93.1, 75853.0], [93.2, 76179.0], [93.3, 76386.0], [93.4, 76523.0], [93.5, 76883.0], [93.6, 77084.0], [93.7, 77100.0], [93.8, 77291.0], [93.9, 77554.0], [94.0, 78246.0], [94.1, 78709.0], [94.2, 79291.0], [94.3, 79382.0], [94.4, 80399.0], [94.5, 80730.0], [94.6, 81003.0], [94.7, 81125.0], [94.8, 81211.0], [94.9, 81269.0], [95.0, 81558.0], [95.1, 81895.0], [95.2, 82521.0], [95.3, 82792.0], [95.4, 83050.0], [95.5, 86363.0], [95.6, 90638.0], [95.7, 94113.0], [95.8, 95132.0], [95.9, 95707.0], [96.0, 95813.0], [96.1, 96172.0], [96.2, 96201.0], [96.3, 96309.0], [96.4, 96339.0], [96.5, 96354.0], [96.6, 96451.0], [96.7, 96589.0], [96.8, 96594.0], [96.9, 96618.0], [97.0, 96627.0], [97.1, 96708.0], [97.2, 96774.0], [97.3, 96820.0], [97.4, 96828.0], [97.5, 96836.0], [97.6, 96851.0], [97.7, 96874.0], [97.8, 96985.0], [97.9, 97003.0], [98.0, 97011.0], [98.1, 97075.0], [98.2, 97114.0], [98.3, 97149.0], [98.4, 97315.0], [98.5, 97355.0], [98.6, 97384.0], [98.7, 97392.0], [98.8, 97427.0], [98.9, 97440.0], [99.0, 97457.0], [99.1, 97469.0], [99.2, 97576.0], [99.3, 97610.0], [99.4, 97668.0], [99.5, 97892.0], [99.6, 98049.0], [99.7, 98254.0], [99.8, 98685.0], [99.9, 101077.0]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[0.0, 103.0], [0.1, 104.0], [0.2, 107.0], [0.3, 107.0], [0.4, 109.0], [0.5, 109.0], [0.6, 109.0], [0.7, 111.0], [0.8, 112.0], [0.9, 112.0], [1.0, 115.0], [1.1, 117.0], [1.2, 119.0], [1.3, 121.0], [1.4, 122.0], [1.5, 122.0], [1.6, 123.0], [1.7, 123.0], [1.8, 123.0], [1.9, 123.0], [2.0, 123.0], [2.1, 124.0], [2.2, 124.0], [2.3, 124.0], [2.4, 124.0], [2.5, 124.0], [2.6, 124.0], [2.7, 124.0], [2.8, 124.0], [2.9, 125.0], [3.0, 125.0], [3.1, 125.0], [3.2, 126.0], [3.3, 126.0], [3.4, 126.0], [3.5, 126.0], [3.6, 126.0], [3.7, 126.0], [3.8, 127.0], [3.9, 127.0], [4.0, 127.0], [4.1, 127.0], [4.2, 127.0], [4.3, 128.0], [4.4, 128.0], [4.5, 128.0], [4.6, 128.0], [4.7, 129.0], [4.8, 129.0], [4.9, 129.0], [5.0, 129.0], [5.1, 129.0], [5.2, 129.0], [5.3, 129.0], [5.4, 130.0], [5.5, 130.0], [5.6, 130.0], [5.7, 130.0], [5.8, 131.0], [5.9, 131.0], [6.0, 131.0], [6.1, 131.0], [6.2, 131.0], [6.3, 131.0], [6.4, 131.0], [6.5, 131.0], [6.6, 131.0], [6.7, 131.0], [6.8, 131.0], [6.9, 131.0], [7.0, 132.0], [7.1, 132.0], [7.2, 132.0], [7.3, 132.0], [7.4, 132.0], [7.5, 132.0], [7.6, 132.0], [7.7, 132.0], [7.8, 132.0], [7.9, 133.0], [8.0, 133.0], [8.1, 133.0], [8.2, 133.0], [8.3, 133.0], [8.4, 133.0], [8.5, 133.0], [8.6, 133.0], [8.7, 133.0], [8.8, 133.0], [8.9, 133.0], [9.0, 133.0], [9.1, 133.0], [9.2, 133.0], [9.3, 134.0], [9.4, 134.0], [9.5, 134.0], [9.6, 134.0], [9.7, 134.0], [9.8, 134.0], [9.9, 134.0], [10.0, 134.0], [10.1, 134.0], [10.2, 134.0], [10.3, 134.0], [10.4, 134.0], [10.5, 134.0], [10.6, 134.0], [10.7, 134.0], [10.8, 135.0], [10.9, 135.0], [11.0, 135.0], [11.1, 135.0], [11.2, 135.0], [11.3, 135.0], [11.4, 135.0], [11.5, 135.0], [11.6, 135.0], [11.7, 135.0], [11.8, 135.0], [11.9, 135.0], [12.0, 135.0], [12.1, 135.0], [12.2, 135.0], [12.3, 136.0], [12.4, 136.0], [12.5, 136.0], [12.6, 136.0], [12.7, 136.0], [12.8, 136.0], [12.9, 136.0], [13.0, 136.0], [13.1, 136.0], [13.2, 136.0], [13.3, 136.0], [13.4, 136.0], [13.5, 136.0], [13.6, 136.0], [13.7, 136.0], [13.8, 136.0], [13.9, 136.0], [14.0, 136.0], [14.1, 136.0], [14.2, 136.0], [14.3, 136.0], [14.4, 136.0], [14.5, 136.0], [14.6, 137.0], [14.7, 137.0], [14.8, 137.0], [14.9, 137.0], [15.0, 137.0], [15.1, 137.0], [15.2, 137.0], [15.3, 137.0], [15.4, 137.0], [15.5, 137.0], [15.6, 137.0], [15.7, 137.0], [15.8, 137.0], [15.9, 137.0], [16.0, 137.0], [16.1, 137.0], [16.2, 137.0], [16.3, 137.0], [16.4, 137.0], [16.5, 137.0], [16.6, 138.0], [16.7, 138.0], [16.8, 138.0], [16.9, 138.0], [17.0, 138.0], [17.1, 138.0], [17.2, 138.0], [17.3, 138.0], [17.4, 138.0], [17.5, 138.0], [17.6, 138.0], [17.7, 138.0], [17.8, 138.0], [17.9, 138.0], [18.0, 138.0], [18.1, 138.0], [18.2, 138.0], [18.3, 138.0], [18.4, 138.0], [18.5, 138.0], [18.6, 138.0], [18.7, 138.0], [18.8, 138.0], [18.9, 138.0], [19.0, 138.0], [19.1, 138.0], [19.2, 138.0], [19.3, 138.0], [19.4, 139.0], [19.5, 139.0], [19.6, 139.0], [19.7, 139.0], [19.8, 139.0], [19.9, 139.0], [20.0, 139.0], [20.1, 139.0], [20.2, 139.0], [20.3, 139.0], [20.4, 139.0], [20.5, 139.0], [20.6, 139.0], [20.7, 139.0], [20.8, 139.0], [20.9, 139.0], [21.0, 139.0], [21.1, 139.0], [21.2, 139.0], [21.3, 139.0], [21.4, 139.0], [21.5, 139.0], [21.6, 139.0], [21.7, 140.0], [21.8, 140.0], [21.9, 140.0], [22.0, 140.0], [22.1, 140.0], [22.2, 140.0], [22.3, 140.0], [22.4, 140.0], [22.5, 140.0], [22.6, 140.0], [22.7, 140.0], [22.8, 140.0], [22.9, 140.0], [23.0, 140.0], [23.1, 140.0], [23.2, 140.0], [23.3, 140.0], [23.4, 140.0], [23.5, 140.0], [23.6, 140.0], [23.7, 141.0], [23.8, 141.0], [23.9, 141.0], [24.0, 141.0], [24.1, 141.0], [24.2, 141.0], [24.3, 141.0], [24.4, 141.0], [24.5, 141.0], [24.6, 141.0], [24.7, 141.0], [24.8, 141.0], [24.9, 141.0], [25.0, 141.0], [25.1, 141.0], [25.2, 141.0], [25.3, 141.0], [25.4, 141.0], [25.5, 141.0], [25.6, 141.0], [25.7, 141.0], [25.8, 141.0], [25.9, 141.0], [26.0, 141.0], [26.1, 141.0], [26.2, 142.0], [26.3, 142.0], [26.4, 142.0], [26.5, 142.0], [26.6, 142.0], [26.7, 142.0], [26.8, 142.0], [26.9, 142.0], [27.0, 142.0], [27.1, 142.0], [27.2, 142.0], [27.3, 142.0], [27.4, 142.0], [27.5, 142.0], [27.6, 142.0], [27.7, 142.0], [27.8, 142.0], [27.9, 142.0], [28.0, 142.0], [28.1, 142.0], [28.2, 142.0], [28.3, 142.0], [28.4, 142.0], [28.5, 142.0], [28.6, 142.0], [28.7, 142.0], [28.8, 142.0], [28.9, 142.0], [29.0, 142.0], [29.1, 142.0], [29.2, 143.0], [29.3, 143.0], [29.4, 143.0], [29.5, 143.0], [29.6, 143.0], [29.7, 143.0], [29.8, 143.0], [29.9, 143.0], [30.0, 143.0], [30.1, 143.0], [30.2, 143.0], [30.3, 143.0], [30.4, 143.0], [30.5, 143.0], [30.6, 143.0], [30.7, 143.0], [30.8, 143.0], [30.9, 144.0], [31.0, 144.0], [31.1, 144.0], [31.2, 144.0], [31.3, 144.0], [31.4, 144.0], [31.5, 144.0], [31.6, 144.0], [31.7, 144.0], [31.8, 144.0], [31.9, 144.0], [32.0, 144.0], [32.1, 144.0], [32.2, 144.0], [32.3, 144.0], [32.4, 144.0], [32.5, 144.0], [32.6, 144.0], [32.7, 144.0], [32.8, 144.0], [32.9, 144.0], [33.0, 144.0], [33.1, 145.0], [33.2, 145.0], [33.3, 145.0], [33.4, 145.0], [33.5, 145.0], [33.6, 145.0], [33.7, 145.0], [33.8, 145.0], [33.9, 145.0], [34.0, 145.0], [34.1, 145.0], [34.2, 145.0], [34.3, 145.0], [34.4, 145.0], [34.5, 145.0], [34.6, 145.0], [34.7, 145.0], [34.8, 145.0], [34.9, 145.0], [35.0, 145.0], [35.1, 145.0], [35.2, 145.0], [35.3, 145.0], [35.4, 145.0], [35.5, 145.0], [35.6, 145.0], [35.7, 145.0], [35.8, 145.0], [35.9, 146.0], [36.0, 146.0], [36.1, 146.0], [36.2, 146.0], [36.3, 146.0], [36.4, 146.0], [36.5, 146.0], [36.6, 146.0], [36.7, 146.0], [36.8, 146.0], [36.9, 146.0], [37.0, 146.0], [37.1, 146.0], [37.2, 146.0], [37.3, 146.0], [37.4, 146.0], [37.5, 146.0], [37.6, 146.0], [37.7, 146.0], [37.8, 146.0], [37.9, 146.0], [38.0, 146.0], [38.1, 146.0], [38.2, 146.0], [38.3, 146.0], [38.4, 147.0], [38.5, 147.0], [38.6, 147.0], [38.7, 147.0], [38.8, 147.0], [38.9, 147.0], [39.0, 147.0], [39.1, 147.0], [39.2, 147.0], [39.3, 147.0], [39.4, 147.0], [39.5, 147.0], [39.6, 147.0], [39.7, 147.0], [39.8, 147.0], [39.9, 147.0], [40.0, 147.0], [40.1, 147.0], [40.2, 147.0], [40.3, 147.0], [40.4, 147.0], [40.5, 147.0], [40.6, 147.0], [40.7, 147.0], [40.8, 147.0], [40.9, 147.0], [41.0, 147.0], [41.1, 147.0], [41.2, 147.0], [41.3, 147.0], [41.4, 147.0], [41.5, 147.0], [41.6, 148.0], [41.7, 148.0], [41.8, 148.0], [41.9, 148.0], [42.0, 148.0], [42.1, 148.0], [42.2, 148.0], [42.3, 148.0], [42.4, 148.0], [42.5, 148.0], [42.6, 148.0], [42.7, 148.0], [42.8, 148.0], [42.9, 148.0], [43.0, 148.0], [43.1, 148.0], [43.2, 148.0], [43.3, 148.0], [43.4, 148.0], [43.5, 148.0], [43.6, 148.0], [43.7, 148.0], [43.8, 148.0], [43.9, 148.0], [44.0, 148.0], [44.1, 148.0], [44.2, 148.0], [44.3, 148.0], [44.4, 148.0], [44.5, 149.0], [44.6, 149.0], [44.7, 149.0], [44.8, 149.0], [44.9, 149.0], [45.0, 149.0], [45.1, 149.0], [45.2, 149.0], [45.3, 149.0], [45.4, 149.0], [45.5, 149.0], [45.6, 149.0], [45.7, 149.0], [45.8, 149.0], [45.9, 149.0], [46.0, 149.0], [46.1, 149.0], [46.2, 149.0], [46.3, 149.0], [46.4, 149.0], [46.5, 149.0], [46.6, 149.0], [46.7, 149.0], [46.8, 149.0], [46.9, 149.0], [47.0, 149.0], [47.1, 149.0], [47.2, 149.0], [47.3, 149.0], [47.4, 149.0], [47.5, 149.0], [47.6, 149.0], [47.7, 149.0], [47.8, 149.0], [47.9, 149.0], [48.0, 149.0], [48.1, 149.0], [48.2, 149.0], [48.3, 149.0], [48.4, 150.0], [48.5, 150.0], [48.6, 150.0], [48.7, 150.0], [48.8, 150.0], [48.9, 150.0], [49.0, 150.0], [49.1, 150.0], [49.2, 150.0], [49.3, 150.0], [49.4, 150.0], [49.5, 150.0], [49.6, 150.0], [49.7, 150.0], [49.8, 150.0], [49.9, 150.0], [50.0, 150.0], [50.1, 150.0], [50.2, 150.0], [50.3, 150.0], [50.4, 151.0], [50.5, 151.0], [50.6, 151.0], [50.7, 151.0], [50.8, 151.0], [50.9, 151.0], [51.0, 151.0], [51.1, 151.0], [51.2, 151.0], [51.3, 151.0], [51.4, 151.0], [51.5, 151.0], [51.6, 151.0], [51.7, 151.0], [51.8, 151.0], [51.9, 151.0], [52.0, 151.0], [52.1, 151.0], [52.2, 151.0], [52.3, 151.0], [52.4, 151.0], [52.5, 151.0], [52.6, 152.0], [52.7, 152.0], [52.8, 152.0], [52.9, 152.0], [53.0, 152.0], [53.1, 152.0], [53.2, 152.0], [53.3, 152.0], [53.4, 153.0], [53.5, 153.0], [53.6, 153.0], [53.7, 153.0], [53.8, 153.0], [53.9, 153.0], [54.0, 153.0], [54.1, 153.0], [54.2, 153.0], [54.3, 153.0], [54.4, 153.0], [54.5, 153.0], [54.6, 153.0], [54.7, 153.0], [54.8, 153.0], [54.9, 153.0], [55.0, 153.0], [55.1, 153.0], [55.2, 153.0], [55.3, 154.0], [55.4, 154.0], [55.5, 154.0], [55.6, 154.0], [55.7, 154.0], [55.8, 154.0], [55.9, 154.0], [56.0, 154.0], [56.1, 154.0], [56.2, 154.0], [56.3, 154.0], [56.4, 154.0], [56.5, 154.0], [56.6, 154.0], [56.7, 154.0], [56.8, 154.0], [56.9, 154.0], [57.0, 154.0], [57.1, 154.0], [57.2, 154.0], [57.3, 154.0], [57.4, 155.0], [57.5, 155.0], [57.6, 155.0], [57.7, 155.0], [57.8, 155.0], [57.9, 155.0], [58.0, 155.0], [58.1, 155.0], [58.2, 155.0], [58.3, 155.0], [58.4, 155.0], [58.5, 155.0], [58.6, 155.0], [58.7, 155.0], [58.8, 155.0], [58.9, 155.0], [59.0, 155.0], [59.1, 155.0], [59.2, 156.0], [59.3, 156.0], [59.4, 156.0], [59.5, 156.0], [59.6, 156.0], [59.7, 156.0], [59.8, 156.0], [59.9, 156.0], [60.0, 156.0], [60.1, 156.0], [60.2, 156.0], [60.3, 156.0], [60.4, 156.0], [60.5, 156.0], [60.6, 156.0], [60.7, 156.0], [60.8, 156.0], [60.9, 156.0], [61.0, 156.0], [61.1, 156.0], [61.2, 156.0], [61.3, 156.0], [61.4, 156.0], [61.5, 156.0], [61.6, 156.0], [61.7, 156.0], [61.8, 156.0], [61.9, 157.0], [62.0, 157.0], [62.1, 157.0], [62.2, 157.0], [62.3, 157.0], [62.4, 157.0], [62.5, 157.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 157.0], [63.0, 157.0], [63.1, 157.0], [63.2, 157.0], [63.3, 157.0], [63.4, 157.0], [63.5, 157.0], [63.6, 157.0], [63.7, 157.0], [63.8, 157.0], [63.9, 157.0], [64.0, 157.0], [64.1, 157.0], [64.2, 157.0], [64.3, 157.0], [64.4, 157.0], [64.5, 158.0], [64.6, 158.0], [64.7, 158.0], [64.8, 158.0], [64.9, 158.0], [65.0, 158.0], [65.1, 158.0], [65.2, 158.0], [65.3, 158.0], [65.4, 158.0], [65.5, 158.0], [65.6, 158.0], [65.7, 158.0], [65.8, 158.0], [65.9, 158.0], [66.0, 158.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 158.0], [66.7, 158.0], [66.8, 158.0], [66.9, 159.0], [67.0, 159.0], [67.1, 159.0], [67.2, 159.0], [67.3, 159.0], [67.4, 159.0], [67.5, 159.0], [67.6, 159.0], [67.7, 159.0], [67.8, 159.0], [67.9, 159.0], [68.0, 159.0], [68.1, 159.0], [68.2, 159.0], [68.3, 159.0], [68.4, 160.0], [68.5, 160.0], [68.6, 160.0], [68.7, 160.0], [68.8, 160.0], [68.9, 160.0], [69.0, 160.0], [69.1, 160.0], [69.2, 160.0], [69.3, 160.0], [69.4, 160.0], [69.5, 160.0], [69.6, 160.0], [69.7, 161.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 162.0], [70.3, 162.0], [70.4, 162.0], [70.5, 162.0], [70.6, 162.0], [70.7, 162.0], [70.8, 162.0], [70.9, 162.0], [71.0, 162.0], [71.1, 162.0], [71.2, 162.0], [71.3, 162.0], [71.4, 162.0], [71.5, 163.0], [71.6, 163.0], [71.7, 163.0], [71.8, 163.0], [71.9, 163.0], [72.0, 163.0], [72.1, 163.0], [72.2, 164.0], [72.3, 164.0], [72.4, 164.0], [72.5, 164.0], [72.6, 164.0], [72.7, 164.0], [72.8, 164.0], [72.9, 164.0], [73.0, 164.0], [73.1, 164.0], [73.2, 164.0], [73.3, 165.0], [73.4, 165.0], [73.5, 165.0], [73.6, 165.0], [73.7, 165.0], [73.8, 165.0], [73.9, 165.0], [74.0, 165.0], [74.1, 165.0], [74.2, 165.0], [74.3, 165.0], [74.4, 165.0], [74.5, 166.0], [74.6, 166.0], [74.7, 166.0], [74.8, 166.0], [74.9, 166.0], [75.0, 166.0], [75.1, 167.0], [75.2, 167.0], [75.3, 167.0], [75.4, 168.0], [75.5, 168.0], [75.6, 168.0], [75.7, 169.0], [75.8, 169.0], [75.9, 169.0], [76.0, 169.0], [76.1, 170.0], [76.2, 170.0], [76.3, 170.0], [76.4, 171.0], [76.5, 171.0], [76.6, 171.0], [76.7, 172.0], [76.8, 173.0], [76.9, 173.0], [77.0, 173.0], [77.1, 173.0], [77.2, 173.0], [77.3, 174.0], [77.4, 174.0], [77.5, 174.0], [77.6, 175.0], [77.7, 175.0], [77.8, 175.0], [77.9, 175.0], [78.0, 175.0], [78.1, 176.0], [78.2, 176.0], [78.3, 176.0], [78.4, 177.0], [78.5, 177.0], [78.6, 177.0], [78.7, 177.0], [78.8, 177.0], [78.9, 177.0], [79.0, 177.0], [79.1, 177.0], [79.2, 177.0], [79.3, 177.0], [79.4, 177.0], [79.5, 178.0], [79.6, 178.0], [79.7, 178.0], [79.8, 179.0], [79.9, 179.0], [80.0, 179.0], [80.1, 179.0], [80.2, 179.0], [80.3, 179.0], [80.4, 179.0], [80.5, 179.0], [80.6, 179.0], [80.7, 179.0], [80.8, 179.0], [80.9, 179.0], [81.0, 180.0], [81.1, 180.0], [81.2, 181.0], [81.3, 181.0], [81.4, 181.0], [81.5, 181.0], [81.6, 181.0], [81.7, 181.0], [81.8, 181.0], [81.9, 181.0], [82.0, 182.0], [82.1, 182.0], [82.2, 182.0], [82.3, 182.0], [82.4, 182.0], [82.5, 182.0], [82.6, 183.0], [82.7, 183.0], [82.8, 183.0], [82.9, 183.0], [83.0, 184.0], [83.1, 184.0], [83.2, 185.0], [83.3, 185.0], [83.4, 185.0], [83.5, 185.0], [83.6, 185.0], [83.7, 185.0], [83.8, 185.0], [83.9, 185.0], [84.0, 185.0], [84.1, 185.0], [84.2, 186.0], [84.3, 186.0], [84.4, 186.0], [84.5, 186.0], [84.6, 186.0], [84.7, 186.0], [84.8, 187.0], [84.9, 187.0], [85.0, 188.0], [85.1, 189.0], [85.2, 189.0], [85.3, 189.0], [85.4, 189.0], [85.5, 189.0], [85.6, 190.0], [85.7, 190.0], [85.8, 190.0], [85.9, 190.0], [86.0, 190.0], [86.1, 191.0], [86.2, 191.0], [86.3, 191.0], [86.4, 191.0], [86.5, 192.0], [86.6, 192.0], [86.7, 192.0], [86.8, 193.0], [86.9, 193.0], [87.0, 194.0], [87.1, 194.0], [87.2, 194.0], [87.3, 195.0], [87.4, 195.0], [87.5, 196.0], [87.6, 196.0], [87.7, 197.0], [87.8, 197.0], [87.9, 198.0], [88.0, 198.0], [88.1, 199.0], [88.2, 202.0], [88.3, 204.0], [88.4, 205.0], [88.5, 207.0], [88.6, 207.0], [88.7, 207.0], [88.8, 208.0], [88.9, 208.0], [89.0, 210.0], [89.1, 211.0], [89.2, 213.0], [89.3, 215.0], [89.4, 217.0], [89.5, 221.0], [89.6, 227.0], [89.7, 230.0], [89.8, 230.0], [89.9, 231.0], [90.0, 232.0], [90.1, 233.0], [90.2, 233.0], [90.3, 233.0], [90.4, 235.0], [90.5, 238.0], [90.6, 238.0], [90.7, 242.0], [90.8, 243.0], [90.9, 246.0], [91.0, 249.0], [91.1, 250.0], [91.2, 252.0], [91.3, 257.0], [91.4, 259.0], [91.5, 259.0], [91.6, 260.0], [91.7, 265.0], [91.8, 290.0], [91.9, 304.0], [92.0, 337.0], [92.1, 338.0], [92.2, 344.0], [92.3, 356.0], [92.4, 400.0], [92.5, 402.0], [92.6, 429.0], [92.7, 468.0], [92.8, 498.0], [92.9, 511.0], [93.0, 519.0], [93.1, 529.0], [93.2, 594.0], [93.3, 634.0], [93.4, 635.0], [93.5, 641.0], [93.6, 658.0], [93.7, 673.0], [93.8, 712.0], [93.9, 718.0], [94.0, 722.0], [94.1, 801.0], [94.2, 801.0], [94.3, 805.0], [94.4, 817.0], [94.5, 819.0], [94.6, 854.0], [94.7, 885.0], [94.8, 886.0], [94.9, 938.0], [95.0, 967.0], [95.1, 995.0], [95.2, 1061.0], [95.3, 1067.0], [95.4, 1073.0], [95.5, 1090.0], [95.6, 1095.0], [95.7, 1107.0], [95.8, 1129.0], [95.9, 1137.0], [96.0, 1144.0], [96.1, 1155.0], [96.2, 1158.0], [96.3, 1163.0], [96.4, 1166.0], [96.5, 1187.0], [96.6, 1232.0], [96.7, 1243.0], [96.8, 1251.0], [96.9, 1286.0], [97.0, 1296.0], [97.1, 1315.0], [97.2, 1349.0], [97.3, 1379.0], [97.4, 1397.0], [97.5, 1416.0], [97.6, 1418.0], [97.7, 1457.0], [97.8, 1534.0], [97.9, 1548.0], [98.0, 1559.0], [98.1, 1564.0], [98.2, 1588.0], [98.3, 1598.0], [98.4, 1633.0], [98.5, 1649.0], [98.6, 1659.0], [98.7, 1685.0], [98.8, 1713.0], [98.9, 1739.0], [99.0, 1780.0], [99.1, 1813.0], [99.2, 1838.0], [99.3, 1859.0], [99.4, 1865.0], [99.5, 1888.0], [99.6, 1981.0], [99.7, 2116.0], [99.8, 2117.0], [99.9, 2317.0]], "isOverall": false, "label": "Login Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 882.0, "series": [{"data": [[66700.0, 1.0], [71500.0, 2.0], [76300.0, 1.0], [81100.0, 1.0], [82700.0, 1.0], [97100.0, 2.0], [32900.0, 1.0], [35300.0, 2.0], [38500.0, 2.0], [37700.0, 1.0], [40900.0, 1.0], [40100.0, 1.0], [48100.0, 3.0], [47300.0, 1.0], [49700.0, 3.0], [200.0, 1.0], [52900.0, 3.0], [52100.0, 3.0], [53700.0, 3.0], [54500.0, 3.0], [56100.0, 4.0], [56900.0, 3.0], [55300.0, 2.0], [57700.0, 3.0], [59300.0, 5.0], [58500.0, 6.0], [60900.0, 6.0], [60100.0, 4.0], [61700.0, 5.0], [63300.0, 2.0], [62500.0, 5.0], [64100.0, 3.0], [64900.0, 2.0], [67400.0, 1.0], [69000.0, 1.0], [65800.0, 1.0], [77000.0, 1.0], [81800.0, 1.0], [97800.0, 1.0], [96200.0, 1.0], [101000.0, 1.0], [400.0, 1.0], [500.0, 1.0], [600.0, 1.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 1.0], [1300.0, 2.0], [1500.0, 2.0], [1800.0, 1.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 1.0], [3000.0, 3.0], [3100.0, 1.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 3.0], [69700.0, 1.0], [76100.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [79300.0, 1.0], [82500.0, 1.0], [5600.0, 1.0], [5900.0, 1.0], [6000.0, 1.0], [96900.0, 1.0], [6300.0, 1.0], [6600.0, 1.0], [7300.0, 1.0], [7400.0, 2.0], [7900.0, 2.0], [10000.0, 42.0], [10600.0, 2.0], [13800.0, 1.0], [14000.0, 1.0], [14400.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15400.0, 2.0], [15600.0, 2.0], [15800.0, 1.0], [16200.0, 1.0], [17200.0, 1.0], [18000.0, 1.0], [17600.0, 1.0], [18800.0, 3.0], [19200.0, 1.0], [19600.0, 1.0], [20000.0, 1.0], [20800.0, 2.0], [21600.0, 3.0], [22400.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [26800.0, 3.0], [27600.0, 3.0], [28400.0, 2.0], [29200.0, 1.0], [42400.0, 1.0], [44000.0, 1.0], [43200.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [48000.0, 1.0], [48800.0, 1.0], [47200.0, 2.0], [50400.0, 1.0], [52000.0, 4.0], [51200.0, 2.0], [52800.0, 2.0], [53600.0, 4.0], [55200.0, 1.0], [54400.0, 1.0], [56800.0, 6.0], [56000.0, 4.0], [57600.0, 9.0], [58400.0, 6.0], [59200.0, 6.0], [60000.0, 9.0], [60800.0, 5.0], [62400.0, 5.0], [61600.0, 5.0], [63200.0, 3.0], [64800.0, 2.0], [64000.0, 1.0], [65600.0, 1.0], [67200.0, 1.0], [72000.0, 1.0], [70400.0, 1.0], [76800.0, 1.0], [97600.0, 2.0], [67100.0, 3.0], [70300.0, 1.0], [81500.0, 1.0], [86300.0, 1.0], [97500.0, 1.0], [36300.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [41100.0, 1.0], [42700.0, 2.0], [43500.0, 2.0], [45100.0, 3.0], [45900.0, 1.0], [48300.0, 4.0], [49100.0, 5.0], [47500.0, 2.0], [49900.0, 2.0], [53100.0, 1.0], [52300.0, 4.0], [51500.0, 1.0], [53900.0, 3.0], [54700.0, 1.0], [55500.0, 2.0], [56300.0, 4.0], [57100.0, 5.0], [57900.0, 5.0], [58700.0, 3.0], [59500.0, 5.0], [61100.0, 7.0], [60300.0, 7.0], [62700.0, 4.0], [61900.0, 3.0], [63500.0, 2.0], [64300.0, 2.0], [65100.0, 4.0], [67800.0, 1.0], [66200.0, 1.0], [74200.0, 1.0], [75800.0, 1.0], [98200.0, 1.0], [96600.0, 2.0], [66900.0, 1.0], [70100.0, 1.0], [76500.0, 1.0], [94100.0, 1.0], [97300.0, 4.0], [95700.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19700.0, 1.0], [20900.0, 2.0], [21300.0, 1.0], [22100.0, 1.0], [23300.0, 1.0], [24900.0, 1.0], [26100.0, 2.0], [26900.0, 3.0], [27300.0, 1.0], [27700.0, 2.0], [29300.0, 1.0], [28900.0, 1.0], [34600.0, 1.0], [33800.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [43400.0, 1.0], [47400.0, 4.0], [48200.0, 6.0], [49000.0, 3.0], [50600.0, 3.0], [49800.0, 1.0], [53000.0, 5.0], [51400.0, 3.0], [52200.0, 3.0], [53800.0, 5.0], [54600.0, 5.0], [56200.0, 8.0], [55400.0, 5.0], [57000.0, 4.0], [57800.0, 5.0], [58600.0, 6.0], [61000.0, 4.0], [59400.0, 4.0], [60200.0, 1.0], [62600.0, 4.0], [63400.0, 2.0], [61800.0, 3.0], [64200.0, 1.0], [65000.0, 1.0], [67600.0, 1.0], [66000.0, 1.0], [70800.0, 1.0], [77200.0, 1.0], [96400.0, 1.0], [98000.0, 1.0], [67500.0, 2.0], [77100.0, 1.0], [80300.0, 1.0], [78700.0, 1.0], [96300.0, 3.0], [43700.0, 2.0], [46100.0, 2.0], [47700.0, 1.0], [50100.0, 1.0], [49300.0, 1.0], [51700.0, 1.0], [53300.0, 3.0], [54100.0, 1.0], [56500.0, 5.0], [57300.0, 5.0], [55700.0, 3.0], [58900.0, 3.0], [58100.0, 3.0], [59700.0, 5.0], [60500.0, 3.0], [61300.0, 4.0], [62900.0, 4.0], [64500.0, 1.0], [65300.0, 2.0], [63700.0, 3.0], [73000.0, 1.0], [81000.0, 1.0], [90600.0, 1.0], [97000.0, 3.0], [98600.0, 1.0], [65700.0, 1.0], [70500.0, 1.0], [73700.0, 1.0], [96100.0, 1.0], [8300.0, 1.0], [9100.0, 2.0], [8900.0, 1.0], [9700.0, 1.0], [10500.0, 1.0], [10700.0, 2.0], [12100.0, 1.0], [13300.0, 1.0], [13700.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [15300.0, 1.0], [14900.0, 2.0], [15100.0, 1.0], [15500.0, 6.0], [15700.0, 1.0], [16100.0, 1.0], [16300.0, 2.0], [17000.0, 3.0], [21400.0, 1.0], [20600.0, 2.0], [22200.0, 1.0], [23000.0, 1.0], [22600.0, 1.0], [23800.0, 2.0], [27000.0, 2.0], [27800.0, 2.0], [28200.0, 1.0], [29800.0, 2.0], [30600.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [34000.0, 1.0], [34800.0, 1.0], [35600.0, 2.0], [36400.0, 2.0], [38000.0, 1.0], [38800.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [44400.0, 2.0], [45200.0, 1.0], [46800.0, 1.0], [47600.0, 1.0], [50800.0, 1.0], [49200.0, 1.0], [50000.0, 1.0], [52400.0, 2.0], [51600.0, 3.0], [53200.0, 4.0], [54800.0, 1.0], [54000.0, 2.0], [57200.0, 3.0], [56400.0, 1.0], [55600.0, 2.0], [58000.0, 7.0], [58800.0, 5.0], [61200.0, 6.0], [59600.0, 4.0], [60400.0, 2.0], [62000.0, 4.0], [62800.0, 4.0], [63600.0, 1.0], [65200.0, 2.0], [64400.0, 2.0], [71200.0, 1.0], [79200.0, 1.0], [96800.0, 5.0], [66300.0, 2.0], [67900.0, 2.0], [69500.0, 2.0], [71100.0, 1.0], [77500.0, 1.0], [80700.0, 1.0], [96700.0, 2.0], [95100.0, 1.0], [34300.0, 2.0], [36700.0, 2.0], [37500.0, 1.0], [38300.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [48700.0, 4.0], [47900.0, 2.0], [51100.0, 1.0], [50300.0, 2.0], [49500.0, 1.0], [51900.0, 7.0], [52700.0, 1.0], [53500.0, 4.0], [55100.0, 3.0], [54300.0, 2.0], [56700.0, 7.0], [55900.0, 7.0], [58300.0, 9.0], [59100.0, 6.0], [57500.0, 3.0], [60700.0, 9.0], [59900.0, 6.0], [62300.0, 8.0], [63100.0, 10.0], [61500.0, 4.0], [63900.0, 6.0], [65500.0, 2.0], [64700.0, 5.0], [68600.0, 2.0], [78200.0, 1.0], [83000.0, 1.0], [97400.0, 4.0], [95800.0, 1.0], [66100.0, 2.0], [69300.0, 1.0], [70900.0, 1.0], [96500.0, 2.0], [17100.0, 2.0], [16700.0, 1.0], [19900.0, 1.0], [20300.0, 1.0], [21500.0, 2.0], [21100.0, 1.0], [22300.0, 1.0], [23100.0, 1.0], [24300.0, 4.0], [27100.0, 1.0], [26700.0, 1.0], [28700.0, 2.0], [29900.0, 1.0], [31500.0, 1.0], [33400.0, 1.0], [38200.0, 1.0], [39000.0, 1.0], [40600.0, 1.0], [46200.0, 1.0], [47000.0, 2.0], [48600.0, 1.0], [47800.0, 3.0], [49400.0, 1.0], [51800.0, 4.0], [52600.0, 1.0], [55000.0, 4.0], [54200.0, 2.0], [53400.0, 6.0], [55800.0, 4.0], [56600.0, 6.0], [57400.0, 6.0], [58200.0, 4.0], [59000.0, 5.0], [59800.0, 7.0], [61400.0, 5.0], [60600.0, 4.0], [63000.0, 4.0], [62200.0, 4.0], [65400.0, 2.0], [63800.0, 1.0], [64600.0, 2.0], [66800.0, 2.0], [70000.0, 1.0], [81200.0, 2.0]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[2100.0, 2.0], [2300.0, 1.0], [600.0, 5.0], [700.0, 3.0], [800.0, 8.0], [200.0, 37.0], [900.0, 3.0], [1000.0, 5.0], [1100.0, 9.0], [1200.0, 5.0], [300.0, 5.0], [1300.0, 4.0], [1400.0, 3.0], [1500.0, 6.0], [1600.0, 4.0], [400.0, 5.0], [100.0, 882.0], [1700.0, 3.0], [1800.0, 5.0], [1900.0, 1.0], [500.0, 4.0]], "isOverall": false, "label": "Login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 56.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 948.0, "series": [{"data": [[0.0, 931.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 56.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 948.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 65.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.1879999999999935, "minX": 1.74302478E12, "maxY": 577.463878326996, "series": [{"data": [[1.74302478E12, 27.26666666666667], [1.7430249E12, 362.15235457063716], [1.74302484E12, 577.463878326996]], "isOverall": false, "label": "Register_Thread", "isController": false}, {"data": [[1.74302478E12, 5.1879999999999935]], "isOverall": false, "label": "Login_Thread", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7430249E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 126.0, "minX": 1.0, "maxY": 101077.0, "series": [{"data": [[3.0, 71557.0], [4.0, 74932.0], [5.0, 96172.0], [6.0, 47715.5], [7.0, 96354.0], [8.0, 59990.0], [9.0, 412.0], [11.0, 52906.0], [12.0, 59024.0], [13.0, 71519.0], [14.0, 70466.0], [15.0, 36391.0], [16.0, 101077.0], [17.0, 76883.0], [18.0, 78709.0], [19.0, 48637.5], [20.0, 96774.0], [21.0, 48933.0], [22.0, 86363.0], [23.0, 96874.0], [24.0, 48932.0], [25.0, 96309.0], [26.0, 96618.0], [27.0, 47726.0], [28.0, 49513.5], [29.0, 96594.0], [30.0, 97576.0], [31.0, 49065.5], [32.0, 49110.5], [33.0, 97315.0], [35.0, 98049.0], [34.0, 98254.0], [37.0, 97610.0], [36.0, 97384.0], [39.0, 49478.0], [38.0, 97075.0], [41.0, 96451.0], [40.0, 97427.0], [43.0, 97114.0], [42.0, 97440.0], [45.0, 96201.0], [44.0, 95813.0], [47.0, 97642.0], [48.0, 34073.0], [49.0, 96985.0], [51.0, 49728.5], [50.0, 96820.0], [53.0, 97003.0], [52.0, 96828.0], [55.0, 98685.0], [54.0, 96836.0], [57.0, 60019.0], [56.0, 97469.0], [59.0, 77291.0], [58.0, 56800.0], [61.0, 62411.0], [60.0, 97355.0], [63.0, 69538.0], [62.0, 71251.0], [65.0, 33380.0], [67.0, 79522.0], [64.0, 60619.0], [71.0, 78246.0], [70.0, 65104.0], [69.0, 62386.0], [68.0, 60993.0], [75.0, 67287.0], [74.0, 59847.0], [73.0, 73000.0], [72.0, 70823.0], [79.0, 81125.0], [78.0, 77084.0], [77.0, 81895.0], [76.0, 65106.0], [81.0, 46741.333333333336], [83.0, 67538.0], [82.0, 76179.0], [87.0, 82792.0], [86.0, 73749.0], [85.0, 79291.0], [84.0, 81211.0], [90.0, 80730.0], [89.0, 71108.0], [88.0, 80399.0], [95.0, 55959.0], [94.0, 52168.0], [93.0, 81003.0], [92.0, 77000.5], [96.0, 42697.5], [98.0, 3589.0], [99.0, 51230.5], [97.0, 49352.0], [103.0, 56500.0], [102.0, 51704.0], [101.0, 48260.0], [100.0, 53218.0], [107.0, 52273.0], [106.0, 47823.0], [105.0, 57838.0], [104.0, 48344.0], [109.0, 27851.0], [111.0, 48154.0], [110.0, 53845.5], [114.0, 28560.0], [112.0, 54239.0], [119.0, 18109.333333333336], [118.0, 30650.0], [117.0, 56032.0], [116.0, 49567.0], [120.0, 29885.5], [121.0, 47530.0], [124.0, 40262.0], [127.0, 53381.0], [131.0, 4014.0], [130.0, 4911.5], [134.0, 3901.0], [135.0, 53285.8], [133.0, 63096.0], [129.0, 54146.5], [138.0, 47406.666666666664], [139.0, 32024.0], [142.0, 54359.0], [140.0, 57130.0], [136.0, 57088.0], [150.0, 4009.0], [149.0, 51091.333333333336], [146.0, 48727.0], [145.0, 52392.0], [144.0, 51996.5], [154.0, 7941.0], [158.0, 36706.66666666667], [159.0, 49158.0], [157.0, 52757.0], [153.0, 50293.0], [152.0, 49460.0], [160.0, 4943.0], [167.0, 54097.0], [164.0, 51967.0], [163.0, 60729.0], [162.0, 53949.0], [161.0, 49150.0], [173.0, 54659.0], [172.0, 48266.0], [171.0, 53531.666666666664], [168.0, 49001.0], [176.0, 41897.25], [177.0, 5199.0], [182.0, 47928.0], [181.0, 51136.0], [179.0, 51939.0], [178.0, 58252.5], [184.0, 38902.5], [185.0, 24882.2], [191.0, 50687.5], [189.0, 56123.666666666664], [188.0, 58242.0], [193.0, 6009.0], [198.0, 58775.666666666664], [197.0, 62009.0], [194.0, 51594.333333333336], [207.0, 55995.0], [205.0, 50000.5], [203.0, 55720.333333333336], [200.0, 53056.0], [211.0, 32402.5], [215.0, 53486.5], [213.0, 51091.5], [212.0, 60694.0], [209.0, 59893.0], [208.0, 55594.5], [219.0, 31724.5], [223.0, 55095.0], [222.0, 55096.0], [220.0, 53497.0], [217.0, 52021.0], [216.0, 52686.0], [225.0, 38980.333333333336], [231.0, 48259.0], [230.0, 58621.0], [229.0, 56488.666666666664], [226.0, 52227.0], [235.0, 56256.5], [234.0, 50657.0], [233.0, 54657.0], [240.0, 7912.0], [244.0, 52448.5], [242.0, 52453.0], [241.0, 53043.5], [249.0, 34295.0], [255.0, 53607.0], [254.0, 56809.0], [252.0, 53376.0], [251.0, 56982.5], [248.0, 53243.0], [259.0, 56350.0], [271.0, 59058.5], [269.0, 54260.0], [267.0, 62631.0], [266.0, 61032.0], [265.0, 62624.5], [263.0, 57144.0], [262.0, 59277.666666666664], [258.0, 54403.0], [257.0, 57605.0], [256.0, 55207.0], [284.0, 58272.0], [280.0, 15392.0], [281.0, 26661.666666666668], [287.0, 58373.0], [282.0, 57661.5], [279.0, 54064.0], [272.0, 58150.0], [277.0, 58829.0], [276.0, 62029.0], [274.0, 55633.0], [273.0, 57343.0], [301.0, 44431.25], [290.0, 13426.5], [289.0, 58306.5], [291.0, 66306.0], [303.0, 17149.0], [298.0, 61397.0], [297.0, 59398.0], [296.0, 52995.0], [294.0, 53798.0], [293.0, 56205.0], [292.0, 62304.5], [307.0, 12183.0], [309.0, 48766.857142857145], [313.0, 38004.0], [316.0, 45049.333333333336], [319.0, 65521.0], [315.0, 54026.0], [312.0, 63197.0], [311.0, 53598.0], [304.0, 58307.666666666664], [310.0, 60003.0], [334.0, 39607.0], [333.0, 56801.0], [332.0, 61740.66666666667], [326.0, 58413.0], [325.0, 57615.0], [324.0, 74638.5], [323.0, 57841.0], [321.0, 54642.0], [349.0, 63323.5], [345.0, 13744.0], [346.0, 37555.0], [348.0, 58126.0], [347.0, 60525.0], [344.0, 58661.666666666664], [343.0, 53327.0], [340.0, 59733.0], [339.0, 67995.5], [337.0, 63732.0], [354.0, 49471.0], [355.0, 16752.5], [357.0, 13734.0], [366.0, 61187.0], [364.0, 64652.666666666664], [363.0, 55855.0], [362.0, 59054.0], [359.0, 56654.0], [352.0, 59267.0], [358.0, 60515.0], [380.0, 61293.0], [375.0, 40310.0], [371.0, 15669.0], [369.0, 60383.0], [368.0, 58519.0], [374.0, 45810.333333333336], [376.0, 35943.0], [379.0, 26940.5], [378.0, 38783.0], [381.0, 63528.0], [373.0, 58474.0], [372.0, 60873.5], [398.0, 64450.0], [399.0, 59649.0], [397.0, 62850.0], [395.0, 59652.0], [394.0, 62256.0], [392.0, 57457.0], [390.0, 62873.0], [389.0, 61675.5], [387.0, 63746.0], [386.0, 62948.0], [385.0, 61326.75], [415.0, 18500.0], [411.0, 47272.0], [410.0, 23070.0], [414.0, 66297.0], [409.0, 59967.666666666664], [406.0, 63558.0], [405.0, 60360.0], [403.0, 58761.0], [402.0, 58761.0], [431.0, 51981.0], [419.0, 40818.0], [425.0, 31366.75], [429.0, 30150.333333333336], [430.0, 43391.0], [427.0, 66705.0], [426.0, 62707.0], [424.0, 69383.0], [423.0, 58586.0], [417.0, 58863.0], [416.0, 61662.0], [418.0, 60862.0], [432.0, 47560.666666666664], [442.0, 54604.4], [447.0, 61238.0], [444.0, 64975.0], [443.0, 61503.0], [438.0, 63625.666666666664], [437.0, 63050.0], [436.0, 63727.0], [450.0, 20066.0], [449.0, 48813.666666666664], [463.0, 62398.0], [460.0, 64183.0], [451.0, 59424.5], [459.0, 60898.333333333336], [456.0, 59568.0], [455.0, 61171.0], [454.0, 65418.0], [453.0, 59420.0], [478.0, 19765.0], [476.0, 45107.0], [475.0, 51650.75], [479.0, 63458.333333333336], [472.0, 60997.0], [471.0, 64741.0], [469.0, 61143.0], [468.0, 62391.666666666664], [465.0, 61199.0], [484.0, 35762.0], [483.0, 52762.0], [482.0, 23462.14285714286], [493.0, 22269.0], [492.0, 54459.75], [494.0, 61832.0], [486.0, 60234.0], [496.0, 44374.0], [509.0, 62873.333333333336], [506.0, 57542.5], [504.0, 60369.5], [503.0, 65568.0], [501.0, 62637.333333333336], [500.0, 61571.0], [497.0, 60966.0], [541.0, 70869.0], [515.0, 34480.0], [514.0, 44568.5], [513.0, 60007.0], [516.0, 22034.0], [517.0, 63137.0], [523.0, 51178.333333333336], [521.0, 58012.333333333336], [520.0, 58812.0], [524.0, 57221.0], [526.0, 62414.5], [542.0, 42859.5], [528.0, 62089.0], [532.0, 63068.0], [530.0, 61111.5], [539.0, 59968.666666666664], [536.0, 59174.0], [535.0, 58372.0], [534.0, 57868.0], [569.0, 58829.0], [548.0, 44456.25], [550.0, 39256.5], [549.0, 68668.0], [558.0, 44441.5], [556.0, 61306.0], [555.0, 59823.0], [553.0, 59427.0], [559.0, 63942.0], [546.0, 63270.0], [544.0, 59640.5], [564.0, 24982.0], [563.0, 57884.0], [562.0, 62335.0], [561.0, 61536.0], [573.0, 61460.5], [571.0, 61620.5], [568.0, 62960.0], [551.0, 60755.0], [567.0, 59760.0], [566.0, 61879.0], [590.0, 34862.25], [588.0, 26061.0], [587.0, 32942.166666666664], [589.0, 27445.0], [586.0, 54255.0], [585.0, 56755.0], [603.0, 47593.0], [606.0, 65719.66666666667], [592.0, 56708.0], [595.0, 60142.0], [593.0, 64106.0], [599.0, 63120.0], [598.0, 57256.333333333336], [602.0, 58607.0], [600.0, 55920.0], [583.0, 59957.0], [582.0, 60035.0], [579.0, 60836.5], [577.0, 61455.0], [576.0, 59855.333333333336], [625.0, 56697.0], [638.0, 56211.666666666664], [635.0, 47550.0], [639.0, 60744.0], [624.0, 65466.5], [633.0, 57675.0], [632.0, 56918.0], [615.0, 57935.0], [614.0, 58736.5], [612.0, 59198.5], [610.0, 58530.0], [622.0, 61184.5], [620.0, 58788.5], [618.0, 58939.666666666664], [630.0, 55629.5], [628.0, 59890.0], [627.0, 57893.5], [665.0, 34850.2], [642.0, 42924.5], [653.0, 54602.0], [640.0, 57656.0], [652.0, 57707.5], [650.0, 42300.0], [649.0, 57971.0], [648.0, 56888.0], [651.0, 29266.0], [663.0, 29834.0], [662.0, 53064.0], [660.0, 55868.5], [658.0, 63383.5], [656.0, 55934.666666666664], [671.0, 57290.0], [670.0, 54206.5], [668.0, 57134.0], [664.0, 51877.0], [645.0, 56089.0], [644.0, 59748.0], [643.0, 59654.5], [699.0, 51619.0], [690.0, 20683.0], [702.0, 51173.5], [703.0, 16778.0], [689.0, 56381.0], [688.0, 56788.0], [700.0, 16383.0], [696.0, 18823.0], [678.0, 51949.0], [677.0, 56118.0], [676.0, 52652.333333333336], [673.0, 67852.0], [672.0, 55854.0], [687.0, 55991.0], [686.0, 66396.0], [685.0, 52609.0], [683.0, 56213.0], [682.0, 53542.0], [681.0, 55943.666666666664], [695.0, 37390.5], [693.0, 51948.5], [692.0, 21149.0], [729.0, 21260.5], [734.0, 10008.0], [719.0, 24663.5], [705.0, 48775.0], [707.0, 17668.0], [706.0, 51574.0], [709.0, 51264.0], [708.0, 47258.0], [711.0, 53040.0], [710.0, 17046.0], [718.0, 20842.0], [717.0, 50442.0], [716.0, 21643.0], [715.0, 48845.0], [714.0, 49062.0], [713.0, 17065.0], [712.0, 53135.0], [735.0, 15716.0], [720.0, 62689.0], [723.0, 49788.0], [722.0, 47878.0], [725.0, 48180.0], [724.0, 60982.0], [733.0, 45217.0], [732.0, 15623.0], [731.0, 50060.5], [727.0, 52020.0], [726.0, 51224.0], [767.0, 10008.0], [756.0, 24961.0], [746.0, 25172.5], [745.0, 15523.0], [744.0, 10006.0], [747.0, 44482.0], [750.0, 10006.0], [749.0, 42886.5], [754.0, 36863.333333333336], [753.0, 44106.0], [752.0, 15540.0], [766.0, 49563.5], [764.0, 15566.0], [763.0, 41142.0], [762.0, 45144.0], [761.0, 25481.0], [760.0, 39471.0], [743.0, 46158.0], [742.0, 43763.0], [741.0, 10007.0], [740.0, 10007.0], [739.0, 10005.0], [738.0, 46908.5], [736.0, 43715.0], [751.0, 10005.0], [759.0, 42298.75], [758.0, 35342.0], [757.0, 34498.333333333336], [755.0, 39279.333333333336], [796.0, 10005.0], [774.0, 31420.25], [783.0, 10006.0], [769.0, 15449.0], [768.0, 10006.0], [771.0, 43461.0], [770.0, 40244.0], [773.0, 16128.0], [772.0, 10005.0], [782.0, 10005.0], [781.0, 10005.0], [780.0, 45670.0], [779.0, 10006.0], [778.0, 44080.0], [777.0, 43282.0], [776.0, 44881.0], [793.0, 26980.333333333336], [798.0, 23191.0], [799.0, 10005.0], [785.0, 10005.0], [784.0, 10005.0], [787.0, 10006.0], [786.0, 46217.0], [789.0, 10006.0], [788.0, 10006.0], [791.0, 10008.0], [790.0, 10006.0], [797.0, 53628.0], [795.0, 10007.0], [794.0, 10008.0], [792.0, 10008.0], [775.0, 42482.0], [828.0, 38132.0], [819.0, 39008.0], [829.0, 38520.0], [816.0, 10005.0], [818.0, 10005.0], [817.0, 10005.0], [826.0, 10007.0], [825.0, 36425.0], [824.0, 38428.0], [807.0, 40374.0], [806.0, 39577.0], [805.0, 40992.0], [804.0, 40190.0], [803.0, 10006.0], [802.0, 10006.0], [801.0, 10006.0], [800.0, 10005.0], [815.0, 10005.0], [814.0, 39122.0], [811.0, 48705.0], [810.0, 36741.0], [809.0, 39499.0], [822.0, 10005.0], [821.0, 10005.0], [820.0, 10005.0], [1.0, 58812.0]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[413.7559999999999, 50060.70900000001]], "isOverall": false, "label": "Register Request-Aggregated", "isController": false}, {"data": [[33.0, 1643.0], [32.0, 1720.6], [2.0, 142.0], [34.0, 1477.5], [37.0, 1609.0], [36.0, 1696.5], [42.0, 1433.5], [3.0, 139.186440677966], [4.0, 164.43488943488927], [5.0, 222.46666666666667], [6.0, 261.5], [7.0, 341.0], [8.0, 349.25], [9.0, 415.5], [10.0, 483.0], [11.0, 520.0], [12.0, 626.0], [13.0, 657.0], [14.0, 621.6666666666666], [15.0, 763.5], [16.0, 784.5], [1.0, 126.0], [17.0, 801.0], [18.0, 871.5], [20.0, 912.0], [21.0, 1129.0], [22.0, 981.0], [23.0, 1259.0], [24.0, 1163.3333333333333], [25.0, 1158.0], [26.0, 1322.5], [27.0, 1469.0], [29.0, 1203.3333333333333], [30.0, 1418.0], [31.0, 1675.5]], "isOverall": false, "label": "Login Request", "isController": false}, {"data": [[5.1879999999999935, 233.45899999999975]], "isOverall": false, "label": "Login Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 829.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1150.6166666666666, "minX": 1.74302478E12, "maxY": 13638.683333333332, "series": [{"data": [[1.74302478E12, 13638.683333333332], [1.7430249E12, 3128.0333333333333], [1.74302484E12, 3617.516666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74302478E12, 4281.85], [1.7430249E12, 3892.6666666666665], [1.74302484E12, 1150.6166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7430249E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 233.45899999999975, "minX": 1.74302478E12, "maxY": 60844.1329639889, "series": [{"data": [[1.74302478E12, 1325.4666666666667], [1.7430249E12, 60844.1329639889], [1.74302484E12, 23237.12167300379]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[1.74302478E12, 233.45899999999975]], "isOverall": false, "label": "Login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7430249E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 233.2209999999994, "minX": 1.74302478E12, "maxY": 60530.803324099725, "series": [{"data": [[1.74302478E12, 1324.9999999999998], [1.7430249E12, 60530.803324099725], [1.74302484E12, 20918.722433460076]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[1.74302478E12, 233.2209999999994]], "isOverall": false, "label": "Login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7430249E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.933333333333335, "minX": 1.74302478E12, "maxY": 5071.686980609421, "series": [{"data": [[1.74302478E12, 11.933333333333335], [1.7430249E12, 5071.686980609421], [1.74302484E12, 2843.216730038023]], "isOverall": false, "label": "Register Request", "isController": false}, {"data": [[1.74302478E12, 34.99999999999992]], "isOverall": false, "label": "Login Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7430249E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 103.0, "minX": 1.74302478E12, "maxY": 101077.0, "series": [{"data": [[1.74302478E12, 2446.0], [1.7430249E12, 101077.0], [1.74302484E12, 60982.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74302478E12, 257.79999999999995], [1.7430249E12, 73674.09999999998], [1.74302484E12, 45103.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74302478E12, 1855.6400000000008], [1.7430249E12, 97606.26], [1.74302484E12, 55362.96999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74302478E12, 1130.5999999999995], [1.7430249E12, 96345.75], [1.74302484E12, 48114.549999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74302478E12, 103.0], [1.7430249E12, 46811.0], [1.74302484E12, 2362.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74302478E12, 151.0], [1.7430249E12, 59319.5], [1.74302484E12, 26876.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7430249E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 147.0, "minX": 1.0, "maxY": 97232.0, "series": [{"data": [[32.0, 836.5], [2.0, 15763.5], [38.0, 1561.5], [3.0, 10564.0], [51.0, 58579.0], [52.0, 61204.5], [53.0, 60525.0], [55.0, 53281.0], [4.0, 51463.0], [5.0, 19685.0], [6.0, 27103.0], [7.0, 40641.5], [113.0, 53492.0], [8.0, 45663.0], [9.0, 59826.0], [11.0, 53628.0], [12.0, 34734.0], [13.0, 63537.0], [14.0, 97232.0], [15.0, 39349.5], [1.0, 25955.5], [16.0, 59819.5], [18.0, 57487.0], [19.0, 173.0], [20.0, 147.0], [21.0, 160.0], [22.0, 207.0], [23.0, 56918.5], [27.0, 44008.0], [28.0, 240.0], [29.0, 62391.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 12815.5], [4.0, 18823.0], [9.0, 10007.0], [5.0, 15345.0], [21.0, 10006.0], [11.0, 10006.0], [23.0, 17077.5], [27.0, 15523.0], [15.0, 10005.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 113.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 97231.5, "series": [{"data": [[32.0, 836.5], [2.0, 15763.5], [38.0, 1553.5], [3.0, 10564.0], [51.0, 58579.0], [52.0, 61204.5], [53.0, 60525.0], [55.0, 53281.0], [4.0, 51463.0], [5.0, 19685.0], [6.0, 27103.0], [7.0, 40641.5], [113.0, 53492.0], [8.0, 45663.0], [9.0, 59826.0], [11.0, 53628.0], [12.0, 34734.0], [13.0, 63537.0], [14.0, 97231.5], [15.0, 39349.5], [1.0, 25955.5], [16.0, 59819.5], [18.0, 57487.0], [19.0, 172.0], [20.0, 147.0], [21.0, 160.0], [22.0, 207.0], [23.0, 56918.5], [27.0, 44008.0], [28.0, 239.5], [29.0, 62391.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [4.0, 0.0], [9.0, 0.0], [5.0, 0.0], [21.0, 0.0], [11.0, 0.0], [23.0, 0.0], [27.0, 0.0], [15.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 113.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.35, "minX": 1.74302478E12, "maxY": 17.983333333333334, "series": [{"data": [[1.74302478E12, 17.983333333333334], [1.74302484E12, 15.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74302484E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.74302478E12, "maxY": 16.916666666666668, "series": [{"data": [[1.74302478E12, 16.916666666666668], [1.7430249E12, 11.833333333333334], [1.74302484E12, 3.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7430249E12, 0.2], [1.74302484E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.74302484E12, 0.6833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7430249E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.74302478E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7430249E12, 0.2], [1.74302484E12, 0.8833333333333333]], "isOverall": false, "label": "Register Request-failure", "isController": false}, {"data": [[1.74302478E12, 16.666666666666668]], "isOverall": false, "label": "Login Request-success", "isController": false}, {"data": [[1.74302478E12, 0.25], [1.7430249E12, 11.833333333333334], [1.74302484E12, 3.5]], "isOverall": false, "label": "Register Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7430249E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.74302478E12, "maxY": 16.916666666666668, "series": [{"data": [[1.74302478E12, 16.916666666666668], [1.7430249E12, 11.833333333333334], [1.74302484E12, 3.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7430249E12, 0.2], [1.74302484E12, 0.8833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7430249E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

